{{!
  Copyright (c) HashiCorp, Inc.
}}

<PageHeader
  @title="List Item"
  @figma="https://www.figma.com/file/SenC8kTQNUJKCvOvcL8WPu/Consul-Component-Library?type=design&node-id=2-4&t=S9Jf7rEKjWwv3e9d-0"
  @github="https://github.com/hashicorp/consul-ui-toolkit/tree/main/toolkit/src/components/cut/list-item"
  @status="development"
>
  A list item is used to list information that is often interactive and when
  selected navigates the user to a details page to view additional information
  about the item listed. A list item is best used to display information that is
  dynamic in nature or information that must be shared within the same line item
  in order to provide the proper context. List items are also helpful when the
  data needing to be displayed is dense and unable to fit within a standard
  table cell.
</PageHeader>

<Hds::Tabs as |T|>
  <T.Tab>Guidelines</T.Tab>
  <T.Tab>Code</T.Tab>
  <T.Panel>
    <div class="docs-Page">
      <div class="docs-Page-content">
        <h2 id="usage">Usage</h2>
        <h3 id="when-to-use">When to use</h3>
        <ul>
          <li>A list item should be used to contain any information or data that
            may not be suitable for a standard table. A list can handle
            displaying more dynamic content since it is never paired with a list
            header to determine the content within (like a table).</li>
        </ul>
        <h3 id="when-not-to-use">When not to use</h3>
        <ul>
          <li>
            When your content within is more than 3 lines tall, consider a card
            instead.
          </li>
          <li>
            If the content you wish to display is consistent for every instance,
            consider using an HDS table instead.
          </li>
          <li>
            If you are displaying data that requires no action, consider an HDS
            table instead.
          </li>
        </ul>

        <h2 id="interactivity-and-actions">Interactivity & Actions</h2>
        <h3 id="interactive-list-item">Interactive List Item</h3>
        <p>The entirety of List Item can be actionable (ie. it can be hovered,
          clicked, and focused), this is the most common behavior. Ensure the
          list item “state” =“default” in order to have interactivity within
          prototypes and code.</p>

        <h3 id="static-list-item">Static List Item</h3>
        <p>
          You can use the list item “state” = “static” to make a list item
          non-interactive (this will apply the “base” elevation / drop-shadow).
          The list item may have interactive elements within them, but are not
          themselves actionable or interactive.
        </p>

        <h3 id="elevation-levels">Elevation Levels</h3>

        <div class="flex-images hds-typography-display-100">
          <div>
            <Hds::Card::Container
              @level="base"
              @hasBorder={{true}}
              class="list-item-elevation"
            />
            <p><strong>Base</strong></p>
            <p class="hds-foreground-faint">Only use for
              <strong>Static cards</strong></p>
          </div>
          <div>
            <Hds::Card::Container
              @level="mid"
              @hasBorder={{true}}
              class="list-item-elevation"
            />
            <p><strong>Mid</strong></p>
            <p class="hds-foreground-faint">Only use for
              <strong>Static cards</strong></p>
          </div>
          <div>
            <Hds::Card::Container
              @level="high"
              @hasBorder={{true}}
              class="list-item-elevation"
            />
            <p><strong>High</strong></p>
            <p class="hds-foreground-faint">Only use for
              <strong>Static cards</strong></p>
          </div>
        </div>

        <h3 id="action-menu">Action Menu</h3>
        <p>There is the option for an action menu. It has default options for a
          standard HDS button (small), and HDS “toggle icon” to allow users to
          open a dropdown to select common values (edit, delete, etc). You can
          also add your own custom action if wanted, the most common use-case
          being a flight icon (which is the default custom value). You can
          however change this to any icon or component you would like. We
          recommend only using one action per list item.
        </p>

        <div class="hds-typography-display-100">
          <p><strong>Button</strong></p>
          <Cut::ListItem class="doc-list-item" as |L|>
            <L.Content class="doc-list-item-content-placeholder">
              <p>content placeholder</p>
            </L.Content>
            <L.ActionButton @text="Button" />
          </Cut::ListItem>
          <p><strong>Dropdown</strong></p>
          <Cut::ListItem class="doc-list-item" as |L|>
            <L.Content class="doc-list-item-content-placeholder">
              <p>content placeholder</p>
            </L.Content>
            <L.ActionDropdown as |A|>
              <A.ToggleIcon
                @icon="more-horizontal"
                @text="Menu"
                @hasChevron={{false}}
              />
              <A.Interactive @icon="edit" @text="Edit" />
              <A.Interactive @icon="hexagon" @text="Delete" @color="critical" />
            </L.ActionDropdown>
          </Cut::ListItem>
          <p><strong>Custom</strong></p>
          <Cut::ListItem class="doc-list-item" as |L|>
            <L.Content class="doc-list-item-content-placeholder">
              <p>content placeholder</p>
            </L.Content>
            <L.ActionGeneric>
              <FlightIcon
                @name="hexagon"
                @color="var(--token-color-foreground-action)"
                @size="24"
              />
            </L.ActionGeneric>
          </Cut::ListItem>

        </div>

        <h2 id="clip-content">Clip content</h2>
        <p>To ensure the proper visual elevation is shown, make sure “Clip
          Content” is checked on the “ListItem” component, this will be enabled
          by default.</p>

        <div class="flex-images">
          <img
            src="/images/list-item-clip-content-do.svg"
            alt="List item clip content correct practices"
          />
          <img
            src="/images/list-item-clip-content-dont.svg"
            alt="List item clip content incorrect practices"
          />
        </div>

        <h2 id="color">Color</h2>
        <h3 id="surface-primary">surface-primary</h3>
        <p>Use “surface primary” (which is the default value) for the background
          color for the list item container. If you are planning to utilize a
          different color ensure there is a good reason to do so.</p>

        <h2 id="size">Size</h2>
        <p>The internal padding should be 12px around all contents placed within
          and 8px between content and action items.</p>
        <img
          src="/images/list-item-size.svg"
          alt="list item sizing guidelines"
        />

        <h3 id="height">Height</h3>
        <p>The height of the container is able to be dynamic based on the
          content that is within as it is set to “hug”, however it is recommend
          to be no taller than 80px.</p>
        <h3 id="width">Width</h3>
        <p>The width of the list item should “fill” the entire section that it
          is placed within.</p>
        <Hds::Alert @type="inline" @color="highlight" as |A|>
          <A.Title>It is important to keep list items that are displayed on the
            same page a consistent size (height and width)</A.Title>
        </Hds::Alert>

        <h2 id="spacing">Spacing</h2>
        <p>When using a List Item you should leave 12px of spacing between each
          item. If used on a main page, leave 24px of spacing above the first
          List Item. The List Item should span (fill) the entire width of the
          space that it occupies.</p>
        <img
          src="/images/list-item-spacing.svg"
          alt="list item spacing guidelines"
        />
      </div>

      <InPageNav as |I|>
        <I.Link @section="#usage" @depth={{1}}>Usage</I.Link>
        <I.Link @section="#when-to-use" @depth={{2}}>When to use</I.Link>
        <I.Link @section="#when-not-to-use" @depth={{2}}>When not to use</I.Link>
        <I.Link @section="#interactivity-and-actions" @depth={{1}}>Interactivity
          & Actions</I.Link>
        <I.Link @section="#interactive-list-item" @depth={{2}}>Interactive list
          item</I.Link>
        <I.Link @section="#static-list-item" @depth={{2}}>Static list item</I.Link>
        <I.Link @section="#elevation-levels" @depth={{2}}>Elevation levels</I.Link>
        <I.Link @section="#action-menu" @depth={{2}}>Action menu</I.Link>
        <I.Link @section="#clip-content" @depth={{1}}>Clip content</I.Link>
        <I.Link @section="#color" @depth={{1}}>Color</I.Link>
        <I.Link @section="#surface-primary" @depth={{2}}>Surface primary</I.Link>
        <I.Link @section="#size" @depth={{1}}>Size</I.Link>
        <I.Link @section="#height" @depth={{2}}>Height</I.Link>
        <I.Link @section="#width" @depth={{2}}>Width</I.Link>
        <I.Link @section="#spacing" @depth={{1}}>Spacing</I.Link>
      </InPageNav>
    </div>
  </T.Panel>
  <T.Panel>
    <div class="docs-Page">
      <div class="docs-Page-content">
        <h2 id="how-to-use">How to use this component</h2>
        <p>To make invocation more flexible, we provide contextual components
          for content, and different optional actions. The most basic invocation
          should make use of the
          <CodeInline @code="Cut::ListItem::Content" />
          contextual component.</p>
        <PreviewBlock as |P|>
          <P.Preview>
            <Cut::ListItem as |L|>
              <L.Content>
                List Item Content
              </L.Content>
            </Cut::ListItem>
          </P.Preview>
          <P.Code
            @code={{{"
            <Cut::ListItem as |L|>
              <L.Content>
                List Item Content
              </L.Content>
            </Cut::ListItem>
            "}}}
          />
        </PreviewBlock>

        <h3 id="Interactions">Interactions</h3>

        {{! template-lint-disable no-potential-path-strings }}
        <p>Optionally, you can provide a
          <CodeInline @code="@route" />,
          <CodeInline @code="@href" />, or
          <CodeInline @code="@onClick" />
          argument to the List Item to have the entire list item become
          interactive. It uses
          <CodeInline @code="<Hds::Interactive />" />
          under the hood. The design system has
          <Hds::Link::Inline
            @href="https://helios.hashicorp.design/components/dropdown?tab=code#listiteminteractive-1"
          >great documentation on that component</Hds::Link::Inline>. The
          abbreviated gist is that providing a
          <CodeInline @code="@route" />
          will use a
          <CodeInline @code="<LinkTo />" />
          or
          <CodeInline @code="<LinkToExternal />" />
          to link to an Ember route. Using
          <CodeInline @code="@href" />
          will use an
          <CodeInline @code="<a />" />
          tag. Finally, using a
          <CodeInline @code="@onClick" />
          will render the List Item with a
          <CodeInline @code="<Button />" />.
        </p>

        <PreviewBlock as |P|>
          <P.Preview>
            <ul class="doc-list-items-demo">
              <Cut::ListItem @route="components.list-item" as |L|>
                <L.Content>
                  List item that is using the
                  <CodeInline @code="@route" />
                  property
                </L.Content>
              </Cut::ListItem>
              <Cut::ListItem
                @href="https://www.github.com/hashicorp/consul-ui-toolkit"
                @isHrefExternal={{true}}
                as |L|
              >
                <L.Content>
                  List item that is using the
                  <CodeInline @code="@href" />
                  property
                </L.Content>
              </Cut::ListItem>
              <Cut::ListItem @onClick={{this.alertMe}} as |L|>
                <L.Content>
                  List item that is using the
                  <CodeInline @code="@href" />
                  property
                </L.Content>
              </Cut::ListItem>
            </ul>
          </P.Preview>
          <P.Code
            @code={{{'
            <ul class="doc-list-items-demo">
              <Cut::ListItem @route="components.list-item" as |L|>
                <L.Content>
                  List item that is using the
                  <CodeInline @code="@route" />
                  property
                </L.Content>
              </Cut::ListItem>

              <Cut::ListItem
                @href="https://www.github.com/hashicorp/consul-ui-toolkit"
                @isHrefExternal={{true}}
                as |L|
              >
                <L.Content>
                  List item that is using the
                  <CodeInline @code="@href" />
                  property
                </L.Content>
              </Cut::ListItem>

              <Cut::ListItem @onClick={{this.alertMe}} as |L|>
                <L.Content>
                  List item that is using the
                  <CodeInline @code="@href" />
                  property
                </L.Content>
              </Cut::ListItem>
            </ul>
            '}}}
          />
        </PreviewBlock>

        <h3 id="actions">Actions</h3>
        <p>In addition to having the entire list item component being
          interactive, we provide 3 different contextual components for
          interactions within the list item. The first being the
          <CodeInline @code="<Cut::ListItem::ActionButton />" />, which will
          render an
          <CodeInline @code="<Hds::Button />" />. Reference the
          <Hds::Link::Inline
            @href="https://helios.hashicorp.design/components/button?tab=code#component-api"
          >HDS documentation</Hds::Link::Inline>
          for complete details on what arguments the button can receive.</p>

        <PreviewBlock as |P|>
          <P.Preview>
            <Cut::ListItem as |L|>
              <L.Content>List item with button</L.Content>
              <L.ActionButton @text="Button" {{on "click" this.alertMe}} />
            </Cut::ListItem>
          </P.Preview>
          <P.Code
            @code={{{'
            <Cut::ListItem as |L|>
              <L.Content>List item with button</L.Content>
              <L.ActionButton @text="Button" {{on "click" this.alertMe}} />
            </Cut::ListItem>
            '}}}
          />
        </PreviewBlock>

        <p>
          We also provide a
          <CodeInline @code="<Cut::ListItem::ActionDropdown />" />
          contextual component that renders a
          <CodeInline @code="<Hds::Dropdown />" />. Reference the
          <Hds::Link::Inline
            @href="https://helios.hashicorp.design/components/dropdown?tab=code"
          >HDS documentation</Hds::Link::Inline>
          for complete details on how to use the dropdown.
        </p>

        <PreviewBlock as |P|>
          <P.Preview>
            <Cut::ListItem class="doc-list-item-demo-dropdown" as |L|>
              <L.Content>List item with button</L.Content>
              <L.ActionDropdown as |A|>
                <A.ToggleIcon
                  @icon="more-horizontal"
                  @text="Menu"
                  @hasChevron={{false}}
                />
                <A.Interactive @icon="edit" @text="Edit" />
                <A.Interactive
                  @icon="hexagon"
                  @text="Delete"
                  @color="critical"
                />
              </L.ActionDropdown>
            </Cut::ListItem>
          </P.Preview>
          <P.Code
            @code={{{'
            <Cut::ListItem as |L|>
              <L.Content>List item with button</L.Content>
              <L.ActionDropdown as |A|>
                <A.ToggleIcon
                  @icon="more-horizontal"
                  @text="Menu"
                  @hasChevron={{false}}
                />
                <A.Interactive @icon="edit" @text="Edit" />
                <A.Interactive
                  @icon="hexagon"
                  @text="Delete"
                  @color="critical"
                />
              </L.ActionDropdown>
            </Cut::ListItem>
            '}}}
          />
        </PreviewBlock>

        <p>Alternatively, there is also a contextual component for a generic
          action section in which you can provide any custom content to fit your
          needs.</p>

        <PreviewBlock as |P|>
          <P.Preview>
            <Cut::ListItem as |L|>
              <L.Content>
                List Item with custom content using generic contextual component
              </L.Content>
              <L.ActionGeneric>
                <FlightIcon
                  @name="hexagon"
                  @color="var(--token-color-foreground-action)"
                  @size="24"
                />
              </L.ActionGeneric>
            </Cut::ListItem>
          </P.Preview>
          <P.Code
            @code={{{'
            <Cut::ListItem as |L|>
              <L.Content>
                List Item with custom content using generic contextual component
              </L.Content>
              <L.ActionGeneric>
                <FlightIcon
                  @name="hexagon"
                  @color="var(--token-color-foreground-action)"
                  @size="24"
                />
              </L.ActionGeneric>
            </Cut::ListItem>
            '}}}
          />
        </PreviewBlock>

        <h2 id="component-api">Component API</h2>

        <ComponentApi
          @name="href"
          @type="string"
          @description="a href to somewhere far away"
        />
        <ComponentApi
          @name="type"
          @type="string"
          @default="neutral"
          @description="Determines the color of the component"
          @values={{array "success" "neutral" "warning" "critical"}}
        />
        <ComponentApi
          @name="isHrefExternal"
          @type="boolean"
          @default="true"
          @description="Determines if the anchor should open the link in a new tab or not"
        />

      </div>
      <InPageNav as |I|>
        <I.Link @section="#how-to-use" @depth={{1}}>How to use this component</I.Link>
        <I.Link @section="#interactions" @depth={{2}}>Interactions</I.Link>
        <I.Link @section="#actions" @depth={{2}}>Actions</I.Link>
        <I.Link @section="#component-api" @depth={{1}}>Component API</I.Link>
      </InPageNav>
    </div>
  </T.Panel>
</Hds::Tabs>